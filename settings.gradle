rootProject.name = 'hibernate-models'


dependencyResolutionManagement {
	repositories {
		mavenCentral()
	}

	versionCatalogs {
		jdks {
			version "baseline", "11"
		}

		libs {
			def byteBuddyVersion = version "byteBuddy", "1.14.7"
			library( "byteBuddy", "net.bytebuddy", "byte-buddy" ).versionRef( byteBuddyVersion )
			library( "byteBuddyAgent", "net.bytebuddy", "byte-buddy-agent" ).versionRef( byteBuddyVersion )

			def classmateVersion = version "classmate", "1.5.1"
			library( "classmate", "com.fasterxml", "classmate" ).versionRef( classmateVersion )

			def hibernateVersion = version "hibernateOrm", "6.3.0.Final"
			library( "hibernateCore", "org.hibernate.orm", "hibernate-core" ).versionRef( hibernateVersion )
			library( "hibernatePlatform", "org.hibernate.orm", "hibernate-platform" ).versionRef( hibernateVersion )

			def hcannVersion = version "hcann", "6.0.6.Final"
			library( "hcann", "org.hibernate.common", "hibernate-commons-annotations" ).versionRef( hcannVersion )

			def jacksonVersion = version "jackson", "2.14.1"
			library( "jackson", "com.fasterxml.jackson.core", "jackson-databind" ).versionRef( jacksonVersion )
			library( "jacksonXml", "com.fasterxml.jackson.dataformat", "jackson-dataformat-xml" ).versionRef( jacksonVersion )
			library( "jacksonJsr310", "com.fasterxml.jackson.datatype", "jackson-datatype-jsr310" ).versionRef( jacksonVersion )

			def jandexVersion = version "jandex", "3.1.2"
			library( "jandex", "io.smallrye", "jandex" ).versionRef( jandexVersion )

			def jaxbApiVersion = version "jaxbApi", "4.0.0"
			library( "jaxbApi", "jakarta.xml.bind", "jakarta.xml.bind-api" ).versionRef( jaxbApiVersion )

			def jaxbRuntimeVersion = version "jaxbRuntime", "4.0.2"
			library( "jaxb", "org.glassfish.jaxb", "jaxb-runtime" ).versionRef( jaxbRuntimeVersion )

			def jbossLoggingVersion = version "jbossLogging", "3.5.0.Final"
			library( "logging", "org.jboss.logging", "jboss-logging" ).versionRef( jbossLoggingVersion )

			def jbossLoggingToolVersion = version "jbossLoggingTool", "2.2.1.Final"
			library( "loggingAnnotations", "org.jboss.logging", "jboss-logging-annotations" ).versionRef( jbossLoggingToolVersion )
			library( "loggingProcessor", "org.jboss.logging", "jboss-logging-processor" ).versionRef( jbossLoggingToolVersion )

			def jsonbApiVersion = version "jsonbApi", "3.0.0"
			library( "jsonbApi", "jakarta.json.bind", "jakarta.json.bind-api" ).versionRef( jsonbApiVersion )

			def jsonbRuntimeVersion = version "jsonbRuntime", "3.0.2"
			library( "jsonb", "org.eclipse", "yasson" ).versionRef( jsonbRuntimeVersion )

			def xjcVersion = version "jaxbRuntime", jaxbRuntimeVersion
			library( "xjc", "org.glassfish.jaxb", "jaxb-xjc" ).versionRef( xjcVersion )
		}

		testLibs {
			def assertjVersion = version "assertj", "3.22.0"
			library( "assertjCore", "org.assertj", "assertj-core" ).versionRef( assertjVersion )

			library( "hibernateTesting", "org.hibernate.orm", "hibernate-testing" ).withoutVersion()

			def jpaVersion = version "jpa", "3.1.0"
			library( "jpa", "jakarta.persistence", "jakarta.persistence-api" ).versionRef( jpaVersion )

			def junit5Version = version "junit5", "5.9.2"
			library( "junit5Api", "org.junit.jupiter", "junit-jupiter-api" ).versionRef( junit5Version )
			library( "junit5Engine", "org.junit.jupiter", "junit-jupiter-engine" ).versionRef( junit5Version )
			library( "junit5Params", "org.junit.jupiter", "junit-jupiter-params" ).versionRef( junit5Version )

			def log4jVersion = version "log4j", "2.17.1"
			library( "log4j", "org.apache.logging.log4j", "log4j-core" ).versionRef( log4jVersion )
		}
	}

}

include "hibernate-models-source"
include "hibernate-models-intermediate"
include "hibernate-models-common"

rootProject.children.each { project ->
	project.buildFileName = "${project.name}.gradle"
	assert project.projectDir.isDirectory()
	assert project.buildFile.exists()
	assert project.buildFile.isFile()
}

